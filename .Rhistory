x.func <- function(x){ sub(".*\\[(.*)\\].*", "\\1", x, perl=TRUE)}
names.unique <- x.func(names)
names.unique <- unique(names.unique)
str(names.unique)
x.func2 <- function(x){ sub('\\[.*','', x)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
names.unique <- names.unique[2:241]
str(names.unique)
ques.unique <- ques.unique[2:16]
str(ques.unique)
ques.unique
df <- data.frame(matrix(ncol = 16, nrow = 240))
colnames(df) <- c("Names", c(ques.unique))
df$Names <- names.unique
str(df)
g1
g1
g1 <- aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Purpose=df_tmp$Purpose))
g1
g1 <- aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Purpose=df_tmp$Purpose))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
library(dplyr)
library(tidyr)
library(ggplot2)
library(MASS)
library(caTools)
library(Amelia)
# import file from drive
df <- read.csv("Data/bank-loan-status-dataset/credit_train.csv")
str(df)
#list missing rows
df[!complete.cases(df),]
# missingness map
## missmap(df)
# We found 3 columns with missing values and we will handle them one by one -
# Months.since.last.delinquent
# Annual.Income
# Credit.Score
# Months.since.last.delinquent -- replace with max value of that column
df[is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent <- max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
any(is.na(df$Months.since.last.delinquent))
# Annual.Income -- replace by grouped mean
df_tmp <- df[!is.na(df$Annual.Income),]
any(is.na(df_tmp$Annual.Income))
g1 <- aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Purpose=df_tmp$Purpose))
g1
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score <- (df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score)/10
df[is.na(df$Credit.Score),]$Credit.Score <- round(mean(df[!is.na(df$Credit.Score),]$Credit.Score))
any(df$Credit.Score > 1000 | is.na(df$Credit.Score))
g1
g1 <- aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership))
g1
g1
df(df$Home.Ownership = "HaveMortgage")
df(df$Home.Ownership == "HaveMortgage")
df[df$Home.Ownership == "HaveMortgage"]
df[df$Home.Ownership == "HaveMortgage",]
df[df$Home.Ownership == "HaveMortgage" & is.na(df$Annual.Income),]
df[df$Home.Ownership == "HaveMortgage" & is.na(df$Annual.Income),]$Annual.Income
g1
df[df$Home.Ownership == "HaveMortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1402620
df[df$Home.Ownership == "Home Mortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1575728
df[df$Home.Ownership == "Own Home" & is.na(df$Annual.Income),]$Annual.Income <- 1241610
df[df$Home.Ownership == "Rent" & is.na(df$Annual.Income),]$Annual.Income <- 1181737
any(is.na(df))
#list missing rows
df[!complete.cases(df),]
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies)]
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankrupcies
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankrupcies
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankruptcies
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankruptcies <- 0
any(is.na(df))
#list missing rows
df[!complete.cases(df),]
na.omit(df)
df
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
library(dplyr)
library(tidyr)
library(ggplot2)
library(MASS)
library(caTools)
library(Amelia)
# import file from drive
df <- read.csv("Data/bank-loan-status-dataset/credit_train.csv")
str(df)
#list missing rows
df[!complete.cases(df),]
# missingness map
## missmap(df)
# We found columns with missing values and we will handle them one by one -
# Months.since.last.delinquent
# Annual.Income
# Credit.Score
# Bankruptcies
# Months.since.last.delinquent -- replace with max value of that column
df[is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent <- max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
any(is.na(df$Months.since.last.delinquent))
# Annual.Income -- replace by grouped mean
df_tmp <- df[!is.na(df$Annual.Income),]
any(is.na(df_tmp$Annual.Income))
g1 <- aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership))
g1
df[df$Home.Ownership == "HaveMortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1402620
df[df$Home.Ownership == "Home Mortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1575728
df[df$Home.Ownership == "Own Home" & is.na(df$Annual.Income),]$Annual.Income <- 1241610
df[df$Home.Ownership == "Rent" & is.na(df$Annual.Income),]$Annual.Income <- 1181737
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score <- (df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score)/10
df[is.na(df$Credit.Score),]$Credit.Score <- round(mean(df[!is.na(df$Credit.Score),]$Credit.Score))
any(df$Credit.Score > 1000 | is.na(df$Credit.Score))
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankruptcies <- 0
any(is.na(df))
#list missing rows
df[!complete.cases(df),]
count(df[!complete.cases(df),])
df[df == "NA"] <- NA
#list missing rows
df[!complete.cases(df),]
#list missing rows
df[complete.cases(df),]
#list missing rows
df[!complete.cases(df),]
df[is.na()]
na.omit(df)
any(is.na(df))
na.omit(df)
any(is.na(df))
any(is.na(df))
na.omit(df)
any(is.na(df))
#list missing rows
df[!complete.cases(df),]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
library(dplyr)
library(tidyr)
library(ggplot2)
library(MASS)
library(caTools)
library(Amelia)
# import file from drive
df <- read.csv("Data/bank-loan-status-dataset/credit_train.csv")
str(df)
#list missing rows
df[!complete.cases(df),]
count(df[!complete.cases(df),])
# missingness map
## missmap(df)
# We found columns with missing values and we will handle them one by one -
# Months.since.last.delinquent
# Annual.Income
# Credit.Score
# Bankruptcies
# Months.since.last.delinquent -- replace with max value of that column
df[is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent <- max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
any(is.na(df$Months.since.last.delinquent))
# Annual.Income -- replace by grouped mean
df_tmp <- df[!is.na(df$Annual.Income),]
any(is.na(df_tmp$Annual.Income))
g1 <- aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership))
g1
df[df$Home.Ownership == "HaveMortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1402620
df[df$Home.Ownership == "Home Mortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1575728
df[df$Home.Ownership == "Own Home" & is.na(df$Annual.Income),]$Annual.Income <- 1241610
df[df$Home.Ownership == "Rent" & is.na(df$Annual.Income),]$Annual.Income <- 1181737
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score <- (df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score)/10
df[is.na(df$Credit.Score),]$Credit.Score <- round(mean(df[!is.na(df$Credit.Score),]$Credit.Score))
any(df$Credit.Score > 1000 | is.na(df$Credit.Score))
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankruptcies <- 0
any(is.na(df))
na.omit(df[!complete.cases(df),])
any(is.na(df))
any(is.na(df))
na.omit(df)
df
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
library(dplyr)
library(tidyr)
library(ggplot2)
library(MASS)
library(caTools)
library(Amelia)
# import file from drive
df <- read.csv("Data/bank-loan-status-dataset/credit_train.csv")
str(df)
#list missing rows
df[!complete.cases(df),]
count(df[!complete.cases(df),])
# missingness map
## missmap(df)
# We found columns with missing values and we will handle them one by one -
# Months.since.last.delinquent
# Annual.Income
# Credit.Score
# Bankruptcies
# Months.since.last.delinquent -- replace with max value of that column
df[is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent <- max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
any(is.na(df$Months.since.last.delinquent))
# Annual.Income -- replace by grouped mean
df_tmp <- df[!is.na(df$Annual.Income),]
any(is.na(df_tmp$Annual.Income))
g1 <- aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership))
g1
df[df$Home.Ownership == "HaveMortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1402620
df[df$Home.Ownership == "Home Mortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1575728
df[df$Home.Ownership == "Own Home" & is.na(df$Annual.Income),]$Annual.Income <- 1241610
df[df$Home.Ownership == "Rent" & is.na(df$Annual.Income),]$Annual.Income <- 1181737
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score <- (df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score)/10
df[is.na(df$Credit.Score),]$Credit.Score <- round(mean(df[!is.na(df$Credit.Score),]$Credit.Score))
any(df$Credit.Score > 1000 | is.na(df$Credit.Score))
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankruptcies <- 0
any(is.na(df))
df <- df[complete.cases(df),]
any(is.na(df))
#list missing rows
df[!complete.cases(df),]
any(is.na(df))
boxplot(df)
plot(df[,c(2)])
plot(df[,c(3)])
str(df)
str(df)
df_num <- df[,c("Current.Loan.Amount","Credit.Score","Annual.Income","Monthly.Debt",11:19)]
df_num <- df[,c(4,6,7,11:19)]
boxplot(df_new)
str(df)
boxplot(df_new)
boxplot(df_num)
str(df)
count(df)
# selecting only integer and numeric columns
df_num <- df[,c(4,6,7,11:19)]
df_new <- lapply(df,as.numeric)
boxplot(df_num)
str(df_new)
df_new <- lapply(df_new,as.numeric)
str(df_new)
str(df_new)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
library(dplyr)
library(tidyr)
library(ggplot2)
library(MASS)
library(caTools)
library(Amelia)
# import file from drive
df <- read.csv("Data/bank-loan-status-dataset/credit_train.csv")
str(df)
#list missing rows
df[!complete.cases(df),]
count(df[!complete.cases(df),])
# missingness map
## missmap(df)
# We found columns with missing values and we will handle them one by one -
# Months.since.last.delinquent
# Annual.Income
# Credit.Score
# Bankruptcies
# Months.since.last.delinquent -- replace with max value of that column
df[is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent <- max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
any(is.na(df$Months.since.last.delinquent))
# Annual.Income -- replace by grouped mean
df_tmp <- df[!is.na(df$Annual.Income),]
any(is.na(df_tmp$Annual.Income))
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership))
df[df$Home.Ownership == "HaveMortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1402620
df[df$Home.Ownership == "Home Mortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1575728
df[df$Home.Ownership == "Own Home" & is.na(df$Annual.Income),]$Annual.Income <- 1241610
df[df$Home.Ownership == "Rent" & is.na(df$Annual.Income),]$Annual.Income <- 1181737
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score <- (df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score)/10
df[is.na(df$Credit.Score),]$Credit.Score <- round(mean(df[!is.na(df$Credit.Score),]$Credit.Score))
any(df$Credit.Score > 1000 | is.na(df$Credit.Score))
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankruptcies <- 0
# remove all other rows with unnecessary values
df <- df[complete.cases(df),]
any(is.na(df))
count(df)
str(df)
boxplot(df)
plot(df[,c(3)])
# selecting only integer and numeric columns
df_num <- df[,c(4,6,7,11:19)]
df_num <- lapply(df_num,as.numeric)
str(df_num)
boxplot(df_num)
boxplot(df_num)
boxplot(df_num[,c(2)])
boxplot(df_num[,c(2)])
boxplot(df_num)
plot(df_num[,c(10)])
boxplot(df_num[,c(2)])
str(df_num)
str(df)
str(df_num)
str(df_num)
# selecting only integer and numeric columns
df_num <- df[,c(4,6,7,11:17)]
df_num <- lapply(df_num,as.numeric)
str(df_num)
str(df)
# selecting only integer and numeric columns
df_num <- df[,c(4,6,7,11,12,13,14,16,17)]
df_num <- lapply(df_num,as.numeric)
str(df_num)
str(df_num)
# selecting only integer and numeric columns
df_num <- df[,c(4,6,7,11,12,13,14,16,17)]
df_num <- lapply(df_num,as.numeric)
str(df_num)
boxplot(df_num)
boxplot(df_num)
# selecting only integer and numeric columns
df_num <- df[,c(4,6,7,11,12,13,14,16)]
df_num <- lapply(df_num,as.numeric)
str(df_num)
boxplot(df_num)
# selecting only integer and numeric columns
df_num <- df[,c(4,6,11,12,13,14)]
df_num <- lapply(df_num,as.numeric)
str(df_num)
boxplot(df_num)
# selecting only integer and numeric columns
df_num <- df[,c(6,7],11,12,13,14,16)]
# selecting only integer and numeric columns
df_num <- df[,c(6,7,11,12,13,14,16)]
df_num <- lapply(df_num,as.numeric)
str(df_num)
boxplot(df_num)
boxplot(df_num)
outlier_values <- boxplot.stats(df_num$Credit.Score)$out
boxplot(df_num$Credit.Score, main="Credit.Score", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Credit.Score)$out
boxplot(df_num$Credit.Score, main="Credit.Score", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Annual.Income)$out
boxplot(df_num$Annual.Income, main="Annual.Income", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Monthly.Debt)$out
boxplot(df_num$Monthly.Debt, main="Monthly.Debt", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Years.of.Credit.History)$out
boxplot(df_num$Years.of.Credit.History, main="Years.of.Credit.History", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Months.since.last.delinquent)$out
boxplot(df_num$Months.since.last.delinquent, main="Months.since.last.delinquent", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Number.of.Open.Accounts)$out
boxplot(df_num$Number.of.Open.Accounts, main="Number.of.Open.Accounts", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Current.Credit.Balance)$out
boxplot(df_num$Current.Credit.Balance, main="Current.Credit.Balance", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Credit.Score)$out
boxplot(df_num$Credit.Score, main="Credit.Score", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
ot.stats(df_num$Current.Credit.Balance)$out
boxplot(df_num$Current.Credit.Balance, main="Current.Credit.Balance", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Current.Credit.Balance)$out
boxplot(df_num$Current.Credit.Balance, main="Current.Credit.Balance", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Number.of.Open.Accounts)$out
boxplot(df_num$Number.of.Open.Accounts, main="Number.of.Open.Accounts", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Credit.Score)$out
boxplot(df_num$Credit.Score, main="Credit.Score", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Annual.Income)$out
boxplot(df_num$Annual.Income, main="Annual.Income", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Current.Credit.Balance)$out
boxplot(df_num$Current.Credit.Balance, main="Current.Credit.Balance", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Number.of.Open.Accounts)$out
boxplot(df_num$Number.of.Open.Accounts, main="Number.of.Open.Accounts", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Credit.Score)$out
boxplot(df_num$Credit.Score, main="Credit.Score", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
boxplot(df_num)
max(df_num$Annual.Income)
count(df_num$Annual.Income == 165557393)
count(df[df_num$Annual.Income == 165557393,])
count(df[df_num$Annual.Income == mean(),]) <- mean(df_num$Annual.Income)
mean(df_num$Annual.Income)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
library(dplyr)
library(tidyr)
library(ggplot2)
library(MASS)
library(caTools)
library(Amelia)
# import file from drive
df <- read.csv("Data/bank-loan-status-dataset/credit_train.csv")
str(df)
#list missing rows
df[!complete.cases(df),]
count(df[!complete.cases(df),])
# missingness map
## missmap(df)
# We found columns with missing values and we will handle them one by one -
# Months.since.last.delinquent
# Annual.Income
# Credit.Score
# Bankruptcies
# Months.since.last.delinquent -- replace with max value of that column
df[is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent <- max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
any(is.na(df$Months.since.last.delinquent))
# Annual.Income -- replace by grouped mean
df_tmp <- df[!is.na(df$Annual.Income),]
any(is.na(df_tmp$Annual.Income))
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership))
df[df$Home.Ownership == "HaveMortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1402620
df[df$Home.Ownership == "Home Mortgage" & is.na(df$Annual.Income),]$Annual.Income <- 1575728
df[df$Home.Ownership == "Own Home" & is.na(df$Annual.Income),]$Annual.Income <- 1241610
df[df$Home.Ownership == "Rent" & is.na(df$Annual.Income),]$Annual.Income <- 1181737
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score <- (df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score)/10
df[is.na(df$Credit.Score),]$Credit.Score <- round(mean(df[!is.na(df$Credit.Score),]$Credit.Score))
any(df$Credit.Score > 1000 | is.na(df$Credit.Score))
# Backrupcies -- replace NA with 0
df[is.na(df$Bankruptcies),]$Bankruptcies <- 0
# remove all other rows with unnecessary values
df <- df[complete.cases(df),]
any(is.na(df))
count(df)
str(df)
boxplot(df)
plot(df[,c(3)])
# selecting only integer and numeric columns
df_num <- df[,c(4,6,7,11,12,13,14,16,17)]
df_num <- lapply(df_num,as.numeric)
str(df_num)
boxplot(df_num)
outlier_values <- boxplot.stats(df_num$Credit.Score)$out
boxplot(df_num$Credit.Score, main="Credit.Score", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Annual.Income)$out
boxplot(df_num$Annual.Income, main="Annual.Income", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Monthly.Debt)$out
boxplot(df_num$Monthly.Debt, main="Monthly.Debt", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Years.of.Credit.History)$out
boxplot(df_num$Years.of.Credit.History, main="Years.of.Credit.History", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Months.since.last.delinquent)$out
boxplot(df_num$Months.since.last.delinquent, main="Months.since.last.delinquent", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Number.of.Open.Accounts)$out
boxplot(df_num$Number.of.Open.Accounts, main="Number.of.Open.Accounts", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlier_values <- boxplot.stats(df_num$Current.Credit.Balance)$out
boxplot(df_num$Current.Credit.Balance, main="Current.Credit.Balance", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
df[df_num$Annual.Income == mean(),] <- mean(df_num$Annual.Income)
df[df_num$Annual.Income == mean(),]
df[df_num$Annual.Income == mean(),]
df[df_num$Annual.Income == max(df$Annual.Income),]
na.omit(df[df_num$Annual.Income == max(df$Annual.Income),])
df[df_num$Annual.Income == max(df$Annual.Income),]
na.omit(df[df_num$Annual.Income == max(df$Annual.Income),])
df_num[df_num$Annual.Income == max(dfnum$Annual.Income),]
df_num[df_num$Annual.Income == max(df_num$Annual.Income),]
max(df_num$Annual.Income)
df_num[df_num$Annual.Income == 165557393),]
df_num[df_num$Annual.Income == 165557393,]
df_num[df_num$Annual.Income = 165557393,]
df_num[df_num$Annual.Income == 165557393,]
str(df_new)
str(df_num)
str(df_num)
df_num[df_num$Annual.Income == 165557393,]
str(df_num)
df_num[df_num$Annual.Income == 165557393,]
max(df_num$Annual.Income)
df_num[df_num$Annual.Income == 165557393,]
