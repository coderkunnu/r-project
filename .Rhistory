#Getting the data
df <- iris
#View(df)
str(df)
#Splitting the data into train and test
library(caTools)
set.seed(101)
sample = sample.split(df$Species, SplitRatio = 0.8)
df.train = subset(df, sample == TRUE)
df.test = subset(df, sample == FALSE)
#Exploring the data
dim(df.train)
str(df.train)
summary(df.train)
levels(df.train$Species)
#Basic Plots
hist(df.train$Sepal.Width)
plot(df.train$Petal.Length,df.train$Petal.Width)
#Box plot to observe distribution
par (mfrow=c(1,4))
for(i in 1:4) {
boxplot(df.train[,i], main=names(df.train)[i])
}
#ggplot2
library(ggplot2)
g <- ggplot(data = df.train, aes(x = Petal.Length, y = Petal.Width))
print(g)
#line plot
g <- g +
geom_point(aes(color = Species, shape = Species )) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length-Width") +
geom_smooth(method = "lm")
print(g)
#Box plot
box <- ggplot(data = df.train, aes(x = Species, y = Sepal.Length)) +
geom_boxplot(aes(fill=Species)) +
ylab("Sepal Length") +
ggtitle("Iris Boxplot") +
stat_summary(fun.y = mean, geom = "point", shape = 5, size = 4)
print(box)
#ggthemes
library(ggthemes)
#Histogram
Histogram <- ggplot(data=df.train, aes(x = Sepal.Width)) +
geom_histogram(binwidth = 0.2, color = "black", aes(fill=Species)) +
xlab("Sepal.Width") +
ylab("Frequency") +
ggtitle("Histogram of Sepal Length") +
theme_economist()
print(Histogram)
#Faceting
facet <- ggplot(data = df.train, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point(aes(shape = Species), size = 1.5) +
geom_smooth(method="lm") +
xlab("Sepal Length") +
ylab("Sepal Width") +
ggtitle("Faceting") +
theme_fivethirtyeight() +
facet_grid(. ~ Species)
print(facet)
# Decision tree classification
library(rpart)
library(caret)
model.rpart <- train(Species ~ ., data = df.train, method = "rpart", trControl = trainControl(method = "cv"))
print(model.rpart)
#plot(model.rpart$finalModel)
#text(model.rpart$finalModel)
#Better plot
#library(rpart.plot)
#rpart.plot(model.rpart$finalModel)
#text(model.rpart$finalModel)
#rattle may not work due to dependency issues
library(rattle)
fancyRpartPlot(model.rpart$finalModel)
text(model.rpart$finalModel)
#Predictionon training set
pred <- table(predict(object = model.rpart$finalModel, newdata = df.train[, 1:4], type = "class"))
pred
#Checking the accuracy of training data using a confusion matrix
confusionMatrix(predict(object = model.rpart$finalModel, newdata = df.train[, 1:4], type = "class"), df.train$Species)
#checking accuray of test data
pred_test <- predict(object = model.rpart$finalModel, newdata = df.test[, 1:4], type = "class")
confusionMatrix(pred_test, df.test$Species)
#random forest classification
set.seed(101)
model.rf <- train(Species ~., data = df.train, method = "rf", trControl = trainControl(method = "cv"))
print(model.rf)
#Checking the accuracy using a confusion matrix on training data
pred <- predict(object = model.rf$finalModel, newdata = df.train[, 1:4], type = "class")
pred
confusionMatrix(pred,df.train$Species)
#Checking the accuracy using a confusion matrix on test data
pred_test <- predict(object = model.rf$finalModel, newdata = df.test[, 1:4], type = "class")
pred_test
confusionMatrix(pred_test,df.test$Species)
#gradient boosting classification
set.seed(101)
model.gbm <- train(Species ~., data = df.train, method = "gbm", trControl = trainControl(method = "cv"))
print(model.gbm)
plot(model.gbm)
summary(model.gbm)
pred<-predict(object = model.gbm, newdata = df.train[,1:4])
confusionMatrix(pred,df.train$Species)
pred_test <- predict(object = model.gbm, newdata = df.test[,1:4])
confusionMatrix(pred_test, df.test$Species)
#xgboost classification
#library(xgboost)
#model.xgbm <- train(Species ~., data = df.train, method = "xgbTree", trControl = trainControl(method = "cv"))
#print(model.xgbm)
#plot(model.xgbm)
#clustering
set.seed(101)
irisCluster <- kmeans(df[, 1:4], centers = 3, nstart = 20)
irisCluster
#check classifiction accuracy
table(irisCluster$cluster, df$Species)
plot(df[c("Sepal.Length", "Sepal.Width")], col = irisCluster$cluster)
points(irisCluster$centers[, c("Sepal.Length", "Sepal.Width")], col = 1:3, pch = 8, cex = 2)
#Linear Discriminant Analysis
library(caret)
library(MASS)
set.seed(101)
model.lda <- train(x = df.train[, 1:4], y = df.train[, 5], method = "lda", metric = "Accuracy")
print(model.lda)
#verify accuracy on training set
pred <- predict(object = model.lda, newdata = df.train[, 1:4])
confusionMatrix(pred, df.train$Species)
#summarizing the accuracy of the models
results <- resamples(list(TREE = model.rpart, randomForest = model.rf, GBM = model.gbm, LDA = model.lda))
summmary(results)
#summarizing the accuracy of the models
results <- resamples(list(TREE = model.rpart, randomForest = model.rf, GBM = model.gbm, LDA = model.lda))
summary(results)
#summarizing the accuracy of the models
results <- resamples(list(TREE = model.rpart, randomForest = model.rf, GBM = model.gbm, LDA = model.lda))
#summarizing the accuracy of the models
results <- resamples(list(TREE = model.rpart, RandomForest = model.rf, GBM = model.gbm, LDA = model.lda))
summary(results)
#summarizing the accuracy of the models
results <- resamples(list(TREE = model.rpart$finalModel, RandomForest = model.rf, GBM = model.gbm, LDA = model.lda))
#summarizing the accuracy of the models
results <- resamples(list(TREE = model.rpart, RandomForest = model.rf, GBM = model.gbm, LDA = model.lda))
count(model.rpart)
count(df.train)
count(df.train)
summary(results)
summary(results)
#summarizing the accuracy of the models
results <- resamples(TREE = model.rpart, RandomForest = model.rf, GBM = model.gbm, LDA = model.lda)
confusionMatrix(pred, df.train$Species)
library(dplyr)
library(tidyr)
df <- read.csv("/Data/credit-default.csv")
wd()
df <- read.csv("Data/credit-default.csv")
df(head)
head(df)
head(df)
view(df)
veiw(df)
View(df)
View(df)
str(df)
str(df)
View(df)
is.na(df)
any(is.na(df))
str(df)
levels(df$default)
unique(df$default)
library(caTools)
set.seed(101)
sample = sample.split(df$default, SplitRatio = 0.75)
sample <- sample.split(df$default, SplitRatio = 0.75)
df.train <- df[, sample]
df.train <- subset(df, sample == TRUE)
df.test <- subset(df, sample == FALSE)
as.factor(df$default)
str(df)
str(df)
as.factor(df$default)
str(df)
as.factor(df$default)
str(df)
df <- as.factor(df$default)
str(df)
str(df)
df <- read.csv("Data/credit-default.csv")
head(df)
#View(df)
str(df)
unique(df$default)
df$default <- as.factor(df$default)
str(df)
unique(df$dependents)
unique(df$existing_credits)
df.output <- read.csv("Output.csv")
wd();
getwd()
df.output <- read.csv("Data/Output.csv")
df.output <- read.csv("Data/Test2_Output.csv")
df.head()
head(df)
head(df.output)
str(df.output)
df.input
df.input
library(readxl)
df.input <- read_xlsx("Data/Test2_Inputfile.xlsx")
head(df.input)
colnames(df.output)
names <-  colnames(df.output)
x.func <- function(x){ sub(".*\\[(.*)\\].*", "\\1", x, perl=TRUE)}
df <- x.func(names)
df
names
names
names <-  colnames(df.output)
names <-  colnames(df.input)
names
x.func <- function(x){ sub(".*\\[(.*)\\].*", "\\1", x, perl=TRUE)}
df <- x.func(names)
df
count(df)
str(count)
str(names)
names1 <- unique(names)
str(names)
str(names1)
names1 <- unique(names)
str(names1)
names <- x.func(names)
names <- unique(names)
str(names)
names <-  colnames(df.input)
names
x.func <- function(x){ sub(".*\\[(.*)\\].*", "\\1", x, perl=TRUE)}
names.unique <- x.func(names)
names.unique <- unique(names.unique)
str(names)
str(names.unique)
x.func2 <- function(x){ sub("^[^(]+", x, perl=TRUE)}
names
x.func2 <- function(x){ sub("^[^[]+", x, perl=TRUE)}
ques.unique <- x.func2(names)
ques.unique <- x.func2(names)
x.func2 <- function(x){ sub("^[^[]+", "\\1", x, perl=TRUE)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
x.func2 <- function(x){ sub("^[^[]+", "\\1", x, perl=TRUE)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
names <-  colnames(df.input)
names
x.func <- function(x){ sub(".*\\[(.*)\\].*", "\\1", x, perl=TRUE)}
names.unique <- x.func(names)
names.unique <- unique(names.unique)
str(names.unique)
x.func2 <- function(x){ sub("^[^[]+", "\\1", x, perl=TRUE)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
x.func2 <- function(x){ sub('\\[.*','', x)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
ques.unique
x.func2 <- function(x){ sub('\\ [.*','', x)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
x.func2 <- function(x){ sub('\\[.*','', x)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
trim(ques.unique)
str(ques.unique)
trim(ques.unique)
trim(ques.unique)
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
ques.unique
str(ques.unique)
str(names.unique)
names.unique <- names.unique[2:241]
names.unique
str(names.unique)
ques.unique <- ques.unique[2:16]
str(ques.unique)
ques.unique <- ques.unique[2:16]
str(ques.unique)
ques.unique
str(ques.unique)
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
str(ques.unique)
str(ques.unique)
str(ques.unique)
ques.unique
ques.unique <- ques.unique[2:16]
str(ques.unique)
ques.unique
str(ques.unique)
ques.unique
dataframe <- c("Names", ques.unique)
dataframe
dataframe[,c("Names")]
dataframe[,c("Names")]
colnames(dataframe)
colnames(dataframe) < dataframe
dataframe
is.data.frame(dataframe)
is.data.frame(dataframe)
is.data.frame(dataframe)
is.data.frame(dataframe)
is.data.frame(dataframe)
is.data.frame(dataframe)
dataframe <- c("Names", ques.unique)
colnames(dataframe) <- dataframe
is.data.frame(dataframe)
dataframe
colnames(dataframe) <- dataframe
dataframe <- c("Names", ques.unique)
colnames(df) <- dataframe
m1 <- matrix(names.unique, ncol=1, byrow=TRUE)
m1
m1(names) <- c("Names", ques.unique)
colnames(m1)<- c("Names", ques.unique)
as.data.frame(as.table(m1))
m1 <- m1[2]
colnames(m1)<- c("Names", ques.unique)
m1
colnames(m1)<- c("Names", ques.unique)
m1 <- m1[,c("freq")]
m1 <- m1[1:240,c("freq")]
m1 <- matrix(names.unique, ncol=1, byrow=TRUE)
as.data.frame(as.table(m1))
m1 <- as.data.frame(as.table(m1))
df <- m1$Freq
df
is.data.frame(df)
dataframe
is.data.frame(df)
df
m1 <- matrix(names.unique, ncol=1, byrow=TRUE)
m1 <- matrix(names.unique, ncol=1, byrow=TRUE)
m1
m1
df <- data.frame(matrix(ncol = 16, nrow = 0))
colnames(df) <- c("Names", c(names.unique))
df <- data.frame(matrix(ncol = 16, nrow = 0))
colnames(df) <- c("Names", c(ques.unique))
df
df
df$Names <- names.unique
df <- data.frame(matrix(ncol = 16, nrow = 240))
colnames(df) <- c("Names", c(ques.unique))
df$Names <- names.unique
df
df <- data.frame(matrix(ncol = 16, nrow = 240))
colnames(df) <- c("Names", c(ques.unique))
df$Names <- names.unique
str(df)
df.input
str(df)
str(df)
names.unique <- x.func(names)
names.unique <- unique(names.unique)
str(names.unique)
head(df.input)
library(readxl)
df.input <- read_xlsx("Data/Test2_Inputfile.xlsx")
head(df.input)
names <-  colnames(df.input)
names
x.func <- function(x){ sub(".*\\[(.*)\\].*", "\\1", x, perl=TRUE)}
names.unique <- x.func(names)
names.unique <- unique(names.unique)
str(names.unique)
x.func2 <- function(x){ sub('\\[.*','', x)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
names.unique <- names.unique[2:241]
str(names.unique)
ques.unique <- ques.unique[2:16]
str(ques.unique)
ques.unique
df <- data.frame(matrix(ncol = 16, nrow = 240))
colnames(df) <- c("Names", c(ques.unique))
df$Names <- names.unique
str(df)
df <- data.frame(matrix(ncol = 16, nrow = 240))
library(readxl)
df.input <- read_xlsx("Data/Test2_Inputfile.xlsx")
head(df.input)
names <-  colnames(df.input)
names
x.func <- function(x){ sub(".*\\[(.*)\\].*", "\\1", x, perl=TRUE)}
names.unique <- x.func(names)
names.unique <- unique(names.unique)
str(names.unique)
x.func2 <- function(x){ sub('\\[.*','', x)}
ques.unique <- x.func2(names)
ques.unique <- unique(ques.unique)
str(ques.unique)
names.unique <- names.unique[2:241]
str(names.unique)
ques.unique <- ques.unique[2:16]
str(ques.unique)
ques.unique
df <- data.frame(matrix(ncol = 16, nrow = 240))
colnames(df) <- c("Names", c(ques.unique))
df$Names <- names.unique
str(df)
missmap(df)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
library(dplyr)
library(tidyr)
library(ggplot2)
library(MASS)
library(caTools)
library(Amelia)
df <- read.csv("Data/bank-loan-status-dataset/credit_train.csv")
str(df)
#list missing rows
df[!complete.cases(df),]
#list missing columns
df[,!complete.cases(df)]
# missingness map
missmap(df)
# missingness map
missmap(df)
str(df)
str(df)
max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent
df[is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent
any(is.na(df$Months.since.last.delinquent))
# Months.since.last.delinquent -- replace with max value of that column
df[is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent <- max(df[!is.na(df$Months.since.last.delinquent),]$Months.since.last.delinquent)
any(is.na(df$Months.since.last.delinquent))
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000]$Credit.Score
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000]$Credit.Score
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > '1000']$Credit.Score
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000,]$Credit.Score
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 && !is.na(df$Credit.Score),]$Credit.Score
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 && !is.na(df$Credit.Score),]$Credit.Score
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score <- (df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score)/10
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score
# Credit.Score -- divide greater than 1000 by 10 and replace NA values with mean
df[df$Credit.Score > 1000 & !is.na(df$Credit.Score),]$Credit.Score
df[is.na(df$Credit.Score)]
df[is.na(df$Credit.Score),]
df[is.na(df$Credit.Score),]$Credit.Score
mean(df[!is.na(df$Credit.Score),]$Credit.Score)
round(mean(df[!is.na(df$Credit.Score),]$Credit.Score))
df[is.na(df$Credit.Score),]$Credit.Score <- round(mean(df[!is.na(df$Credit.Score),]$Credit.Score))
any(df[df$Credit.Score > 1000 || !is.na(df$Credit.Score),])
any(df[df$Credit.Score > 1000 || !is.na(df$Credit.Score)])
any(is.na(df$Months.since.last.delinquent))
any(df[df$Credit.Score > 1000 || !is.na(df$Credit.Score)])
any(df[df$Credit.Score > 1000 | !is.na(df$Credit.Score)])
any(df[df$Credit.Score > 1000 | !is.na(df$Credit.Score),])
any(df[df$Credit.Score > 1000,])
any(df$Credit.Score > 1000,)
any(df$Credit.Score > 1000)
any(df$Credit.Score > 1000 | is.na(df$Credit.Score)
any(df$Credit.Score > 1000 | is.na(df$Credit.Score))
any(df$Credit.Score > 1000 | is.na(df$Credit.Score))
# Annual.Income --
df[is.na(df$Annual.Income),]
# Annual.Income -- replace by grouped mean
aggregate(df$Annual.Income, FUN=mean, by=list(Years.in.current.job=df$Years.in.current.job, Annual.Income=df$Annual.Income))
# Annual.Income -- replace by grouped mean
aggregate(df$Annual.Income, FUN=mean, by=list(Years.in.current.job=df$Years.in.current.job))
# Annual.Income -- replace by grouped mean
df_tmp <- df[!is.na(df$Annual.Income)]
# Annual.Income -- replace by grouped mean
df_tmp <- df[!is.na(df$Annual.Income),]
is.na(df_tmp)
is.na(df_tmp$Annual.Income)
any(is.na(df_tmp$Annual.Income))
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Years.in.current.job=df_tmp$Years.in.current.job))
aggregate(mean = df_tmp$Annual.Income, FUN=mean, by=list(Years.in.current.job=df_tmp$Years.in.current.job))
aggregate(mean = df_tmp$Annual.Income, FUN=mean, by=list(Years.in.current.job=df_tmp$Years.in.current.job))
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Years.in.current.job=df_tmp$Years.in.current.job))
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership))
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership, Purpose=df_tmp$Purpose)
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership, Purpose=df_tmp$Purpose))
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Home.Ownership=df_tmp$Home.Ownership, Purpose=df_tmp$Purpose))
aggregate(df_tmp$Annual.Income, FUN=mean, by=list(Purpose=df_tmp$Purpose))
